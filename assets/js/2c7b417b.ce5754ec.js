"use strict";(self.webpackChunkcustup_doc=self.webpackChunkcustup_doc||[]).push([[2650],{6952:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var r=n(5893),i=n(1151);const t={sidebar_position:4},o="Style override",l={id:"options/style-override",title:"Style override",description:"The options for overriding CustUp element styles or for adding to the elements' classnames.",source:"@site/docs/options/style-override.md",sourceDirName:"options",slug:"/options/style-override",permalink:"/custup-doc/docs/options/style-override",draft:!1,unlisted:!1,editUrl:"https://github.com/paulosabayomi/custup-doc/tree/main/docs/options/style-override.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"File Sources",permalink:"/custup-doc/docs/options/file-sources-config"},next:{title:"Properties",permalink:"/custup-doc/docs/properties"}},c={},d=[{value:"external_source_style_override",id:"external_source_style_override",level:2},{value:"Example",id:"example",level:3},{value:"media_capture_source_style_override",id:"media_capture_source_style_override",level:2},{value:"Example",id:"example-1",level:3},{value:"default_styles_override",id:"default_styles_override",level:2},{value:"Example",id:"example-2",level:3},{value:"persist_styles_override_across_instances",id:"persist_styles_override_across_instances",level:2},{value:"default_icons_override",id:"default_icons_override",level:2},{value:"Example",id:"example-3",level:3}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"style-override",children:"Style override"}),"\n",(0,r.jsx)(s.p,{children:"The options for overriding CustUp element styles or for adding to the elements' classnames."}),"\n",(0,r.jsx)(s.h2,{id:"external_source_style_override",children:"external_source_style_override"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.em,{children:"Optional"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type:"})," ",(0,r.jsxs)(s.em,{children:[(0,r.jsx)(s.code,{children:"Object"})," of ",(0,r.jsx)(s.a,{href:"/docs/customization/external-sources",children:"External sources UI styles"})]})]}),"\n",(0,r.jsxs)(s.li,{children:["Default: ",(0,r.jsx)(s.code,{children:"{}"})]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This option is used for adding a class name or overriding the external sources elements' class name."}),"\n",(0,r.jsx)(s.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"const instance1 = new CustUp({\n    external_source_style_override: {\n        url_source_container: ['random_class_name', true],\n        // url_source_container: 'random_class_name', // to override the current class name\n    }\n})\n"})}),"\n",(0,r.jsx)(s.h2,{id:"media_capture_source_style_override",children:"media_capture_source_style_override"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.em,{children:"Optional"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type:"})," ",(0,r.jsxs)(s.em,{children:[(0,r.jsx)(s.code,{children:"Object"})," of ",(0,r.jsx)(s.a,{href:"/docs/customization/media-sources",children:"Media sources UI styles"})]})]}),"\n",(0,r.jsxs)(s.li,{children:["Default: ",(0,r.jsx)(s.code,{children:"{}"})]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This option is used for adding a class name or overriding the media sources elements' class name."}),"\n",(0,r.jsx)(s.h3,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"const instance1 = new CustUp({\n    media_capture_source_style_override: {\n        media_capture_main_container: ['random_class_name', true],\n        // media_capture_main_container: 'random_class_name', // to override the current class name\n    }\n})\n"})}),"\n",(0,r.jsx)(s.h2,{id:"default_styles_override",children:"default_styles_override"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.em,{children:"Optional"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type:"})," ",(0,r.jsxs)(s.em,{children:[(0,r.jsx)(s.code,{children:"Object"})," of ",(0,r.jsx)(s.a,{href:"/docs/customization/main-ui",children:"Main UI styles"})]})]}),"\n",(0,r.jsxs)(s.li,{children:["Default: ",(0,r.jsx)(s.code,{children:"{}"})]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This option is used for adding a class name or overriding the default/main ui elements' class name."}),"\n",(0,r.jsx)(s.h3,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"const instance1 = new CustUp({\n    default_styles_override: {\n        outerContainer: ['random_class_name', true],\n        // outerContainer: 'random_class_name', // to override the current class name\n    }\n})\n"})}),"\n",(0,r.jsx)(s.h2,{id:"persist_styles_override_across_instances",children:"persist_styles_override_across_instances"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.em,{children:"Optional"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type:"})," ",(0,r.jsx)(s.em,{children:(0,r.jsx)(s.code,{children:"boolean"})})]}),"\n",(0,r.jsxs)(s.li,{children:["Default: ",(0,r.jsx)(s.code,{children:"false"})]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["Sometimes you may want to apply the style that you applied to an instance to other instances too, to achieve that just set ",(0,r.jsx)(s.code,{children:"persist_styles_override_across_instances"})," to ",(0,r.jsx)(s.code,{children:"true"})," then the styles that were set to the instance will also be applied to other instances after the instance."]}),"\n",(0,r.jsx)(s.p,{children:"The best way to implement this is to set this option in the instance before other instances that you want the customized style to span."}),"\n",(0,r.jsx)(s.h2,{id:"default_icons_override",children:"default_icons_override"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.em,{children:"Optional"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Type:"})," ",(0,r.jsxs)(s.em,{children:[(0,r.jsx)(s.code,{children:"Object"})," of ",(0,r.jsx)(s.a,{href:"/docs/types/icons",children:"Icons"})]})]}),"\n",(0,r.jsx)(s.li,{children:"Default: All icons"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"This option is for overriding an icon or adding new icons on the fly, you can provide an HTMLElement or SVG to it."}),"\n",(0,r.jsx)(s.h3,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'const instance1 = new CustUp({\n    default_icons_override: {\n        add_file: `<div>File</div>`, // overrides the `add_file` icon\n        new_icon: `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n            <g id="SVGRepo_bgCarrier" stroke-width="0"></g>\n            <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>\n            <g id="SVGRepo_iconCarrier"> <g id="Interface / Line_L"> \n                <path id="Vector" d="M12 19V5" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> \n            </g> </g>\n        </svg>` // adds a vertical line svg icon\n    }\n})\n'})})]})}function h(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>l,a:()=>o});var r=n(7294);const i={},t=r.createContext(i);function o(e){const s=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(t.Provider,{value:s},e.children)}}}]);